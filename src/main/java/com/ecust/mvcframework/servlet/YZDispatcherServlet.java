package com.ecust.mvcframework.servlet;import com.ecust.mvcframework.annotation.*;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.URL;import java.util.*;/** * @Author:zhenyuan * @Date:Created in 20:48 2018/12/21 */public class YZDispatcherServlet extends HttpServlet {    private Properties contextConfig = new Properties();    private List<String> classNames = new ArrayList<String>();    private Map<String, Object> ioc = new HashMap<>();    private Map<String,Method> handlerMapping = new HashMap<>();    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        this.doPost(req, resp);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //运行阶段，根据用户请求url自动分发        try {            doDispatch(req, resp);        }catch (Exception e){            e.printStackTrace();            resp.getWriter().write("500"+Arrays.toString(e.getStackTrace()));        }    }    private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws IOException, InvocationTargetException, IllegalAccessException {        if (this.handlerMapping.isEmpty()){            return;        }        //决定路径        String requestURI = req.getRequestURI();        //处理成相对路径        String contextPath = req.getContextPath();        requestURI = requestURI.replace(contextPath,"").replaceAll("/+","/");        if (!this.handlerMapping.containsKey(requestURI)){            resp.getWriter().write("404 not fund!");            return;        }        Method method = this.handlerMapping.get(requestURI) ;//        System.out.println(method);        //从ioc容器中拿方法对应的实例        String beanName = lowerFirstCase(method.getDeclaringClass().getSimpleName());        Map<String,String[]> params = req.getParameterMap();        method.invoke(ioc.get(beanName),new Object[]{req,resp,params.get("name")[0]});    }    @Override    public void init(ServletConfig config) throws ServletException {        //1、加载配置文件        doLoadConfig(config.getInitParameter("contextConfigLocation"));        //2、扫描相关类        doScanner(contextConfig.getProperty("scanPackage"));        //3、初始化扫描到的相关类，并且把他们保存到IOC        doInstance();        //4、依赖注入，DI        doAutowired();        //5、初始化HandlerMapping        inntHandlerMapping();        System.out.println("YZSpring init success!!");    }    private void inntHandlerMapping() {        if (ioc.isEmpty()){            return;        }        for (Map.Entry<String, Object> entry : ioc.entrySet()) {            Class<?> clazz = entry.getValue().getClass();            if (!clazz.isAnnotationPresent(YZController.class)){                return;            }            String baseUrl = "";            if (clazz.isAnnotationPresent(YZRequestMapping.class)){                YZRequestMapping requestMapping = clazz.getAnnotation(YZRequestMapping.class);                baseUrl = requestMapping.value();            }            Method[] methods = clazz.getMethods();//只认public            for (Method method : methods) {                if (!method.isAnnotationPresent(YZRequestMapping.class)){                    continue;                }                YZRequestMapping requestMapping = method.getAnnotation(YZRequestMapping.class);                String url = ("/" + baseUrl + "/" + requestMapping.value()).replaceAll("/+", "/");                handlerMapping.put(url,method);                System.out.println("Mapping:"+url+","+method);            }        }    }    private void doAutowired() {        if (ioc.isEmpty()){            return;        }        for (Map.Entry<String, Object> entry : ioc.entrySet()) {            Field[] fields = entry.getValue().getClass().getDeclaredFields();            for (Field field : fields) {                if (!field.isAnnotationPresent(YZAutowired.class)){                    continue;                }                YZAutowired autowired = field.getAnnotation(YZAutowired.class);                String beanName = autowired.value().trim();                if ("".equals(beanName)){                    beanName = field.getType().getName();                }                field.setAccessible(true);//暴力访问                try {                    field.set(entry.getValue(),ioc.get(beanName));                } catch (IllegalAccessException e) {                    e.printStackTrace();                }            }        }    }    private void doInstance() {        if (classNames.isEmpty()) {            return;        }        try {            for (String className : classNames) {                Class<?> clazz = Class.forName(className);                //实例化，保存到IOC                //初始化添加注解的类                if (clazz.isAnnotationPresent(YZController.class)) {                    Object instace = clazz.newInstance();                    String beanName = lowerFirstCase(clazz.getSimpleName());                    ioc.put(beanName, instace);                } else if (clazz.isAnnotationPresent(YZService.class)) {                    //因为service有可能注入的不是它本身，而是实现类                    //2、自定义beanname                    YZService annotation = clazz.getAnnotation(YZService.class);                    String beanName = annotation.value();                    //1、默认类名首字母小写                    if ("".equals(beanName)) {                        beanName = lowerFirstCase(clazz.getSimpleName());                    }                    Object ins = clazz.newInstance();                    ioc.put(beanName, ins);                    //3.如果是接口，用其接口类型作为key                    Class<?>[] interfaces = clazz.getInterfaces();                    for (Class<?> anInterface : interfaces) {                        if (ioc.containsKey(anInterface.getName())){                            throw new Exception("The BeanName Exits");                        }                        ioc.put(anInterface.getName(), ins);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    private String lowerFirstCase(String simpleName) {        char[] chars = simpleName.toCharArray();        chars[0] += 32;        return String.valueOf(chars);    }    private void doScanner(String scanPackage) {        URL url = this.getClass().getClassLoader().getResource("/" + scanPackage.replaceAll("\\.", "/"));        File classDir = new File(url.getFile());        for (File file : classDir.listFiles()) {            if (file.isDirectory()) {                doScanner(scanPackage + "." + file.getName());            } else {                if (file.getName().endsWith(".class")) {                    String className = scanPackage + "." + file.getName().replaceAll(".class", "");                    classNames.add(className);                }            }        }    }    private void doLoadConfig(String contextConfigLocation) {        InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(contextConfigLocation);        try {            contextConfig.load(resourceAsStream);        } catch (IOException e) {            e.printStackTrace();        }    }}